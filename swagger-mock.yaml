openapi: 3.0.3
info:
  title: TONE Authentication API (Mock)
  description: |
    TONEアプリケーションの認証API仕様書（モック版）
    
    ## 概要
    このAPIは、ユーザーの認証機能を提供します。
    **モックAPI**のため、実際のデータベース操作や認証処理は行わず、
    固定のレスポンスを返します。
    
    ## モックAPIの特徴
    - 実際の認証処理は行わない
    - 固定のレスポンスを返す
    - テスト用のデータを使用
    - 開発・テスト環境での使用を想定
    
    ## テスト用アカウント
    - **メールアドレス**: `test@example.com`
    - **パスワード**: `password123`
    - **ユーザー名**: `testuser`
    
    ## 注意事項
    - 本番環境では使用しないでください
    - セキュリティ機能は無効化されています
    - データは永続化されません
   version: 1.0.0
   contact:
     name: TONE Development Team
     email: support@tone-app.com
   license:
     name: MIT
     url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api/v1
    description: 開発環境（モック）
  - url: http://localhost:8080/api/v1
    description: テスト環境（モック）

tags:
  - name: Authentication
    description: 認証関連のエンドポイント（モック）
  - name: Users
    description: ユーザー情報関連のエンドポイント（モック）

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: ユーザー登録（モック）
      description: |
        新しいユーザーを登録します（モック版）。
        
        ## モック動作
        - 実際のデータベースには保存されません
        - 常に成功レスポンスを返します
        - バリデーションは最小限です
        
        ## テスト用データ
        以下のデータでテストできます：
        ```json
        {
          "username": "testuser",
          "email": "test@example.com",
          "password": "password123",
          "confirmPassword": "password123"
        }
        ```
      operationId: registerUserMock
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              test_user:
                summary: テスト用ユーザー
                value:
                  username: "testuser"
                  email: "test@example.com"
                  password: "password123"
                  confirmPassword: "password123"
              another_user:
                summary: 別のテストユーザー
                value:
                  username: "demo_user"
                  email: "demo@example.com"
                  password: "demo123"
                  confirmPassword: "demo123"
      responses:
        '201':
          description: ユーザー登録成功（モック）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              examples:
                success_response:
                  summary: 登録成功レスポンス
                  value:
                    user:
                      id: "mock-user-001"
                      username: "testuser"
                      email: "test@example.com"
                      createdAt: "2024-01-01T00:00:00.000Z"
                    token: "mock-jwt-token-12345"
        '400':
          description: バリデーションエラー（モック）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                validation_error:
                  summary: バリデーションエラー例
                  value:
                    error:
                      code: "VALIDATION_ERROR"
                      message: "入力内容にエラーがあります"
                      details:
                        username: "ユーザー名は3文字以上で入力してください"
                        email: "有効なメールアドレスを入力してください"
                        password: "パスワードは8文字以上で入力してください"
                        confirmPassword: "パスワードが一致しません"

  /auth/login:
    post:
      tags:
        - Authentication
      summary: ユーザーログイン（モック）
      description: |
        ユーザーのログインを処理します（モック版）。
        
        ## モック動作
        - 実際の認証処理は行いません
        - 固定のテストアカウントでログイン成功
        - 不正な認証情報でも一定の確率で成功
        
        ## テスト用アカウント
        - **メールアドレス**: `test@example.com`
        - **パスワード**: `password123`
        
        ## モックロジック
        - 上記のテストアカウント: 100%成功
        - その他のアカウント: 50%成功（ランダム）
        - 空の認証情報: 100%失敗
      operationId: loginUserMock
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              test_account:
                summary: テスト用アカウント
                value:
                  email: "test@example.com"
                  password: "password123"
              random_account:
                summary: ランダムアカウント（50%成功）
                value:
                  email: "random@example.com"
                  password: "random123"
              empty_credentials:
                summary: 空の認証情報（100%失敗）
                value:
                  email: ""
                  password: ""
      responses:
        '200':
          description: ログイン成功（モック）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              examples:
                test_user_success:
                  summary: テストユーザーログイン成功
                  value:
                    user:
                      id: "mock-user-001"
                      username: "testuser"
                      email: "test@example.com"
                      createdAt: "2024-01-01T00:00:00.000Z"
                    token: "mock-jwt-token-12345"
                random_user_success:
                  summary: ランダムユーザーログイン成功
                  value:
                    user:
                      id: "mock-user-002"
                      username: "randomuser"
                      email: "random@example.com"
                      createdAt: "2024-01-15T10:30:00.000Z"
                    token: "mock-jwt-token-67890"
        '400':
          description: バリデーションエラー（モック）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              example:
                error:
                  code: "VALIDATION_ERROR"
                  message: "入力内容にエラーがあります"
                  details:
                    email: "メールアドレスは必須です"
                    password: "パスワードは必須です"
        '401':
          description: 認証失敗（モック）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_credentials:
                  summary: 無効な認証情報
                  value:
                    error:
                      code: "INVALID_CREDENTIALS"
                      message: "メールアドレスまたはパスワードが正しくありません"
                      details: {}
                empty_credentials:
                  summary: 空の認証情報
                  value:
                    error:
                      code: "MISSING_CREDENTIALS"
                      message: "メールアドレスとパスワードを入力してください"
                      details: {}

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: ユーザーログアウト（モック）
      description: |
        ユーザーのログアウトを処理します（モック版）。
        
        ## モック動作
        - 実際のトークン無効化は行いません
        - 常に成功レスポンスを返します
        - 認証ヘッダーは任意です
      operationId: logoutUserMock
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ログアウト成功（モック）
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "ログアウトしました"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-01T12:00:00.000Z"
              example:
                message: "ログアウトしました"
                timestamp: "2024-01-01T12:00:00.000Z"
        '401':
          description: 認証エラー（モック）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error:
                  code: "UNAUTHORIZED"
                  message: "認証が必要です"
                  details: {}

  /auth/me:
    get:
      tags:
        - Users
      summary: 現在のユーザー情報取得（モック）
      description: |
        現在ログインしているユーザーの情報を取得します（モック版）。
        
        ## モック動作
        - 固定のテストユーザー情報を返します
        - 認証ヘッダーは任意です
        - 常に同じユーザー情報を返します
      operationId: getCurrentUserMock
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ユーザー情報取得成功（モック）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                test_user_info:
                  summary: テストユーザー情報
                  value:
                    id: "mock-user-001"
                    username: "testuser"
                    email: "test@example.com"
                    createdAt: "2024-01-01T00:00:00.000Z"
                    profile:
                      firstName: "テスト"
                      lastName: "ユーザー"
                      avatar: "https://example.com/avatar.jpg"
        '401':
          description: 認証エラー（モック）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error:
                  code: "UNAUTHORIZED"
                  message: "認証が必要です"
                  details: {}

  /auth/health:
    get:
      tags:
        - Authentication
      summary: APIヘルスチェック（モック）
      description: |
        APIの動作状況を確認します（モック版）。
        
        ## モック動作
        - 常に正常な状態を返します
        - レスポンス時間は固定です
        - テスト用の情報を含みます
      operationId: healthCheckMock
      responses:
        '200':
          description: API正常動作（モック）
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-01T12:00:00.000Z"
                  version:
                    type: string
                    example: "1.0.0"
                  environment:
                    type: string
                    example: "mock"
                  uptime:
                    type: number
                    example: 3600
              example:
                status: "healthy"
                timestamp: "2024-01-01T12:00:00.000Z"
                version: "1.0.0"
                environment: "mock"
                uptime: 3600

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWTトークンを使用した認証（モック版）。
        実際の認証処理は行わず、任意のトークンでアクセス可能です。
        テスト用のトークン: `mock-jwt-token-12345`

  schemas:
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
        - confirmPassword
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'
          description: ユーザー名（英数字とアンダースコアのみ）
          example: "testuser"
        email:
          type: string
          format: email
          description: メールアドレス
          example: "test@example.com"
        password:
          type: string
          minLength: 6
          description: パスワード（6文字以上）
          example: "password123"
        confirmPassword:
          type: string
          description: パスワード確認（passwordと一致する必要があります）
          example: "password123"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: メールアドレス
          example: "test@example.com"
        password:
          type: string
          description: パスワード
          example: "password123"

    User:
      type: object
      properties:
        id:
          type: string
          description: ユーザーID
          example: "mock-user-001"
        username:
          type: string
          description: ユーザー名
          example: "testuser"
        email:
          type: string
          format: email
          description: メールアドレス
          example: "test@example.com"
        createdAt:
          type: string
          format: date-time
          description: アカウント作成日時
          example: "2024-01-01T00:00:00.000Z"
        profile:
          type: object
          description: プロフィール情報（オプション）
          properties:
            firstName:
              type: string
              example: "テスト"
            lastName:
              type: string
              example: "ユーザー"
            avatar:
              type: string
              format: uri
              example: "https://example.com/avatar.jpg"

    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          description: JWTトークン（モック）
          example: "mock-jwt-token-12345"

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: エラーコード
              example: "INVALID_CREDENTIALS"
            message:
              type: string
              description: エラーメッセージ
              example: "メールアドレスまたはパスワードが正しくありません"
            details:
              type: object
              description: エラーの詳細情報
              additionalProperties: true

    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            error:
              type: object
              properties:
                code:
                  type: string
                  example: "VALIDATION_ERROR"
                message:
                  type: string
                  example: "入力内容にエラーがあります"
                details:
                  type: object
                  additionalProperties:
                    type: string
                  example:
                    username: "ユーザー名は3文字以上で入力してください"
                    email: "有効なメールアドレスを入力してください"
                    password: "パスワードは6文字以上で入力してください"
                    confirmPassword: "パスワードが一致しません"

  examples:
    RegisterSuccess:
      summary: 登録成功例（モック）
      value:
        user:
          id: "mock-user-001"
          username: "testuser"
          email: "test@example.com"
          createdAt: "2024-01-01T00:00:00.000Z"
        token: "mock-jwt-token-12345"

    LoginSuccess:
      summary: ログイン成功例（モック）
      value:
        user:
          id: "mock-user-001"
          username: "testuser"
          email: "test@example.com"
          createdAt: "2024-01-01T00:00:00.000Z"
        token: "mock-jwt-token-12345"

    ValidationError:
      summary: バリデーションエラー例（モック）
      value:
        error:
          code: "VALIDATION_ERROR"
          message: "入力内容にエラーがあります"
          details:
            username: "ユーザー名は3文字以上で入力してください"
            email: "有効なメールアドレスを入力してください"
            password: "パスワードは6文字以上で入力してください"
            confirmPassword: "パスワードが一致しません"

    AuthenticationError:
      summary: 認証エラー例（モック）
      value:
        error:
          code: "INVALID_CREDENTIALS"
          message: "メールアドレスまたはパスワードが正しくありません"
          details: {} 